
// This ROM is automatically generated by the assembler.

module ROM(
    input [31:0] addr,
    output [31:0] data
);

    always @(*) begin
        case (addr)
        32'h80000000: data <= 32'h08000003; // j reset
        32'h80000004: data <= 32'h08000006; // j interrupt
        32'h80000008: data <= 32'h08000009; // j exception
        32'h8000000C: data <= 32'h201F0001; // addi $ra $0 1
        32'h80000010: data <= 32'h001FFD80; // sll $ra $ra 22
        32'h80000014: data <= 32'h03E00008; // jr $ra
        32'h80000018: data <= 32'h201F0001; // addi $ra $0 1
        32'h8000001C: data <= 32'h001FFD80; // sll $ra $ra 22
        32'h80000020: data <= 32'h03E00008; // jr $ra
        32'h80000024: data <= 32'h201F0001; // addi $ra $0 1
        32'h80000028: data <= 32'h001FFD80; // sll $ra $ra 22
        32'h8000002C: data <= 32'h03E00008; // jr $ra
        32'h00400000: data <= 32'h2012000A; // addi $s2 $0 10
        32'h00400004: data <= 32'h20100001; // addi $s0 $0 1
        32'h00400008: data <= 32'h02308820; // add $s1 $s1 $s0
        32'h0040000C: data <= 32'h22100001; // addi $s0 $s0 1
        32'h00400010: data <= 32'h1612FFFD; // bne $s0 $s2 loop
        32'h00400014: data <= 32'h02201020; // add $v0 $s1 $0
        32'h00400018: data <= 32'h03E00008; // jr $ra

        default: data <= 32'hCCCCCCCC;
        endcase
    end

endmodule

    