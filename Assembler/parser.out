Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Unused terminals:

    BLTZ
    SUB
    SLTI
    JR
    BLEZ
    SUBU
    BEQ
    ANDI
    IDENTIFIER
    ADDIU
    SRA
    XOR
    SLT
    J
    SRL
    SLL
    ADD
    BGTZ
    BNE
    AND
    ADDU
    JALR
    SLTIU
    JAL
    NOR
    NOP
    OR
    ADDI

Grammar

Rule 0     S' -> program
Rule 1     program -> program instruction
Rule 2     program -> instruction
Rule 3     instruction -> LW register NUMBER LBRACKET register RBRACKET
Rule 4     instruction -> SW register NUMBER LBRACKET register RBRACKET
Rule 5     instruction -> LUI register NUMBER
Rule 6     register -> REGPREFIX NUMBER

Terminals, with rules where they appear

ADD                  : 
ADDI                 : 
ADDIU                : 
ADDU                 : 
AND                  : 
ANDI                 : 
BEQ                  : 
BGTZ                 : 
BLEZ                 : 
BLTZ                 : 
BNE                  : 
IDENTIFIER           : 
J                    : 
JAL                  : 
JALR                 : 
JR                   : 
LBRACKET             : 3 4
LUI                  : 5
LW                   : 3
NOP                  : 
NOR                  : 
NUMBER               : 3 4 5 6
OR                   : 
RBRACKET             : 3 4
REGPREFIX            : 6
SLL                  : 
SLT                  : 
SLTI                 : 
SLTIU                : 
SRA                  : 
SRL                  : 
SUB                  : 
SUBU                 : 
SW                   : 4
XOR                  : 
error                : 

Nonterminals, with rules where they appear

instruction          : 1 2
program              : 1 0
register             : 3 3 4 4 5

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . program instruction
    (2) program -> . instruction
    (3) instruction -> . LW register NUMBER LBRACKET register RBRACKET
    (4) instruction -> . SW register NUMBER LBRACKET register RBRACKET
    (5) instruction -> . LUI register NUMBER

    LW              shift and go to state 3
    SW              shift and go to state 2
    LUI             shift and go to state 5

    program                        shift and go to state 4
    instruction                    shift and go to state 1

state 1

    (2) program -> instruction .

    LW              reduce using rule 2 (program -> instruction .)
    SW              reduce using rule 2 (program -> instruction .)
    LUI             reduce using rule 2 (program -> instruction .)
    $end            reduce using rule 2 (program -> instruction .)


state 2

    (4) instruction -> SW . register NUMBER LBRACKET register RBRACKET
    (6) register -> . REGPREFIX NUMBER

    REGPREFIX       shift and go to state 6

    register                       shift and go to state 7

state 3

    (3) instruction -> LW . register NUMBER LBRACKET register RBRACKET
    (6) register -> . REGPREFIX NUMBER

    REGPREFIX       shift and go to state 6

    register                       shift and go to state 8

state 4

    (0) S' -> program .
    (1) program -> program . instruction
    (3) instruction -> . LW register NUMBER LBRACKET register RBRACKET
    (4) instruction -> . SW register NUMBER LBRACKET register RBRACKET
    (5) instruction -> . LUI register NUMBER

    LW              shift and go to state 3
    SW              shift and go to state 2
    LUI             shift and go to state 5

    instruction                    shift and go to state 9

state 5

    (5) instruction -> LUI . register NUMBER
    (6) register -> . REGPREFIX NUMBER

    REGPREFIX       shift and go to state 6

    register                       shift and go to state 10

state 6

    (6) register -> REGPREFIX . NUMBER

    NUMBER          shift and go to state 11


state 7

    (4) instruction -> SW register . NUMBER LBRACKET register RBRACKET

    NUMBER          shift and go to state 12


state 8

    (3) instruction -> LW register . NUMBER LBRACKET register RBRACKET

    NUMBER          shift and go to state 13


state 9

    (1) program -> program instruction .

    LW              reduce using rule 1 (program -> program instruction .)
    SW              reduce using rule 1 (program -> program instruction .)
    LUI             reduce using rule 1 (program -> program instruction .)
    $end            reduce using rule 1 (program -> program instruction .)


state 10

    (5) instruction -> LUI register . NUMBER

    NUMBER          shift and go to state 14


state 11

    (6) register -> REGPREFIX NUMBER .

    RBRACKET        reduce using rule 6 (register -> REGPREFIX NUMBER .)
    NUMBER          reduce using rule 6 (register -> REGPREFIX NUMBER .)


state 12

    (4) instruction -> SW register NUMBER . LBRACKET register RBRACKET

    LBRACKET        shift and go to state 15


state 13

    (3) instruction -> LW register NUMBER . LBRACKET register RBRACKET

    LBRACKET        shift and go to state 16


state 14

    (5) instruction -> LUI register NUMBER .

    LW              reduce using rule 5 (instruction -> LUI register NUMBER .)
    SW              reduce using rule 5 (instruction -> LUI register NUMBER .)
    LUI             reduce using rule 5 (instruction -> LUI register NUMBER .)
    $end            reduce using rule 5 (instruction -> LUI register NUMBER .)


state 15

    (4) instruction -> SW register NUMBER LBRACKET . register RBRACKET
    (6) register -> . REGPREFIX NUMBER

    REGPREFIX       shift and go to state 6

    register                       shift and go to state 17

state 16

    (3) instruction -> LW register NUMBER LBRACKET . register RBRACKET
    (6) register -> . REGPREFIX NUMBER

    REGPREFIX       shift and go to state 6

    register                       shift and go to state 18

state 17

    (4) instruction -> SW register NUMBER LBRACKET register . RBRACKET

    RBRACKET        shift and go to state 19


state 18

    (3) instruction -> LW register NUMBER LBRACKET register . RBRACKET

    RBRACKET        shift and go to state 20


state 19

    (4) instruction -> SW register NUMBER LBRACKET register RBRACKET .

    LW              reduce using rule 4 (instruction -> SW register NUMBER LBRACKET register RBRACKET .)
    SW              reduce using rule 4 (instruction -> SW register NUMBER LBRACKET register RBRACKET .)
    LUI             reduce using rule 4 (instruction -> SW register NUMBER LBRACKET register RBRACKET .)
    $end            reduce using rule 4 (instruction -> SW register NUMBER LBRACKET register RBRACKET .)


state 20

    (3) instruction -> LW register NUMBER LBRACKET register RBRACKET .

    LW              reduce using rule 3 (instruction -> LW register NUMBER LBRACKET register RBRACKET .)
    SW              reduce using rule 3 (instruction -> LW register NUMBER LBRACKET register RBRACKET .)
    LUI             reduce using rule 3 (instruction -> LW register NUMBER LBRACKET register RBRACKET .)
    $end            reduce using rule 3 (instruction -> LW register NUMBER LBRACKET register RBRACKET .)

